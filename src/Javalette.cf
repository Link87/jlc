-- programs ------------------------------------------------

entrypoints Prog ;

Program.   Prog ::= [TopDef] ;

FnDef.	   TopDef ::= Type Ident "(" [Arg] ")" Blk ;

separator nonempty TopDef "" ;

Argument.  Arg ::= Type Ident;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Blk ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Blk ;

Decl.      Stmt ::= Type [DeclItem] ";" ;

NoInit.    DeclItem ::= Ident ;

Init.      DeclItem ::= Ident "=" Expr ;

separator nonempty DeclItem "," ;

Ass.       Stmt ::= Expr "=" Expr ";" ;

Incr.      Stmt ::= Expr "++" ";" ;

Decr.      Stmt ::= Expr "--" ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

ForEach.   Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExpr.     Stmt ::= Expr  ";" ;

-- L-Values --------------------------------------------------

internal ArrId.  LValue ::= LValue "[" Expr "]" ;

internal Id.     LValue ::= Ident ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Double.    Type ::= "double" ;

Boolean.   Type ::= "boolean" ;

Void.      Type ::= "void" ;

internal   Fn. Type ::= Type "(" [Type] ")" ;

internal   String. Type ::= "String" ;

Array.     Type ::= Type "[]";

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr9 ::= Ident ;

ELitInt.   Expr9 ::= Integer ;

ELitDoub.  Expr9 ::= Double;

ELitTrue.  Expr9 ::= "true" ;

ELitFalse. Expr9 ::= "false" ;

EApp.      Expr9 ::= Ident "(" [Expr] ")" ;

EString.   Expr9 ::= String ;

ENeg.      Expr5 ::= "-" Expr6 ;

ENot.      Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 9 ;

separator  Expr "," ;

internal ETyped. Expr ::= "[" Expr ":" Type "]" ;

EArrAlloc.  Expr9 ::= "new" Type [SizeItem] ;

SizeSpec. SizeItem ::= "[" Expr "]" ;

separator nonempty SizeItem "" ;

EArrIndex. Expr8 ::= Expr8 "[" Expr "]" ;

EArrLen.   Expr6 ::= Expr6 "." "length" ;

internal ELValue. Expr ::= LValue ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

