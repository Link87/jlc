-- programs ------------------------------------------------

entrypoints Prog ;

Program.    Prog ::= [TopDef] ;

FnDef.	    TopDef ::= Type Ident "(" [Param] ")" Blk ;

StrDef.     TopDef ::= "struct" Ident "{" [StrItem] "}" ";" ;

ExtStrDef.  TopDef ::= "typedef" "struct" Ident "{" [StrItem] "}" "*" Ident ";" ;

EnumDef.    TopDef ::= "enum" Ident "{" [EnumItem] "}" ";" ;

ClsDef.	    TopDef ::= "class" Ident "{" [ClsItem] "}" ;

SubClsDef.  TopDef ::= "class" Ident "extends" Ident "{" [ClsItem] "}" ;

TypeDef.    TopDef ::= "typedef" "struct" Ident "*" Ident ";" ;

separator nonempty TopDef "" ;

Parameter.  Param ::= Type Ident;

separator   Param "," ;

StrFld.     StrItem ::= Type [FldIdent] ";" ;

separator   StrItem "" ;

FldIdent.   FldIdent ::= Ident ;

separator nonempty FldIdent "," ;

EnumFld.    EnumItem ::= Ident ;

separator   EnumItem "," ;

InstVar.    ClsItem ::= Type Ident ";" ;

MethDef.    ClsItem ::= Type Ident "(" [Param] ")" Blk ;

separator   ClsItem "" ;

-- statements ----------------------------------------------

Block.      Blk ::= "{" [Stmt] "}" ;

separator   Stmt "" ;

Empty.      Stmt ::= ";" ;

BStmt.      Stmt ::= Blk ;

Decl.       Stmt ::= Type [DeclItem] ";" ;

NoInit.     DeclItem ::= Ident ;

Init.       DeclItem ::= Ident "=" Expr ;

separator nonempty DeclItem "," ;

Ass.        Stmt ::= Expr "=" Expr ";" ;

Incr.       Stmt ::= Expr "++" ";" ;

Decr.       Stmt ::= Expr "--" ";" ;

Ret.        Stmt ::= "return" Expr ";" ;

VRet.       Stmt ::= "return" ";" ;

Cond.       Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.   Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.      Stmt ::= "while" "(" Expr ")" Stmt ;

ForEach.    Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;

SExpr.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.        Type ::= "int" ;

Double.     Type ::= "double" ;

Boolean.    Type ::= "boolean" ;

Void.       Type ::= "void" ;

Array.      Type ::= Type "[]" ;

Named.      Type ::= Ident ;

separator   Type "," ;

-- Expressions ---------------------------------------------

EVar.       Expr9 ::= Ident ;

ELitInt.    Expr9 ::= Integer ;

ELitDouble. Expr9 ::= Double;

ELitTrue.   Expr9 ::= "true" ;

ELitFalse.  Expr9 ::= "false" ;

ENull.      Expr9 ::= "(" Ident ")null" ;

ECall.      Expr9 ::= Ident "(" [Expr] ")" ;

EString.    Expr9 ::= String ;

ENew.       Expr8 ::= "new" Type [SizeItem] ;

SizeSpec.   SizeItem ::= "[" Expr "]" ;

separator   SizeItem "" ;

EDeref.     Expr8 ::= Expr8 "->" Ident ;

EArrIndex.  Expr8 ::= Expr8 "[" Expr "]" ;

EDot.       Expr6 ::= Expr6 "." Expr7 ;

ENeg.       Expr5 ::= "-" Expr6 ;

ENot.       Expr5 ::= "!" Expr6 ;

EMul.       Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.       Expr3 ::= Expr3 AddOp Expr4 ;

ERel.       Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.       Expr1 ::= Expr2 "&&" Expr1 ;

EOr.        Expr ::= Expr1 "||" Expr ;

coercions   Expr 9 ;

separator   Expr "," ;

-- operators -----------------------------------------------

Plus.       AddOp ::= "+" ;

Minus.      AddOp ::= "-" ;

Times.      MulOp ::= "*" ;

Div.        MulOp ::= "/" ;

Mod.        MulOp ::= "%" ;

LTH.        RelOp ::= "<" ;

LE.         RelOp ::= "<=" ;

GTH.        RelOp ::= ">" ;

GE.         RelOp ::= ">=" ;

EQU.        RelOp ::= "==" ;

NE.         RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment     "#" ;

comment     "//" ;

comment     "/*" "*/" ;

